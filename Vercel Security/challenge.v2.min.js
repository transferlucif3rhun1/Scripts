const m = function () {
  let Gq = true;
  return function (GW, Gh) {
    const Gk = Gq ? function () {
      if (Gh) {
        const Gm = Gh.apply(GW, arguments);
        Gh = null;
        return Gm;
      }
    } : function () {};
    Gq = false;
    return Gk;
  };
}();
const t = m(this, function () {
  return t.toString().search("(((.+)+)+)+$").toString().constructor(t).search("(((.+)+)+)+$");
});
t();
'use strict';
var y = new TextEncoder("utf-8");
var d = new TextDecoder("utf-8");
var i = new DataView(new ArrayBuffer(8));
var g = [];
var G6 = class {
  constructor() {
    this._callbackTimeouts = new Map();
    this._nextCallbackTimeoutID = 1;
    let Gh = GD => {
      i.setBigInt64(0, GD, true);
      let Gz = i.getFloat64(0, true);
      if (Gz === 0) {
        return;
      }
      if (!isNaN(Gz)) {
        return Gz;
      }
      let Gd = GD & 0xffffffffn;
      return this._values[Gd];
    };
    let Gk = GD => {
      let Gz = new DataView(this._inst.exports.memory.buffer).getBigUint64(GD, true);
      return Gh(Gz);
    };
    let Gm = GD => {
      if (typeof GD == "number") {
        return isNaN(GD) ? 9221120237041090560n : GD === 0 ? 9221120237041090561n : (i.setFloat64(0, GD, true), i.getBigInt64(0, true));
      }
      switch (GD) {
        case undefined:
          return 0x0n;
        case null:
          return 9221120237041090562n;
        case true:
          return 9221120237041090563n;
        case false:
          return 9221120237041090564n;
      }
      let Gd = this._ids.get(GD);
      if (Gd === undefined) {
        Gd = this._idPool.pop();
        if (Gd === undefined) {
          Gd = BigInt(this._values.length);
        }
        this._values[Gd] = GD;
        this._goRefCounts[Gd] = 0;
        this._ids.set(GD, Gd);
      }
      this._goRefCounts[Gd]++;
      let GC = 0x1n;
      switch (typeof GD) {
        case "string":
          GC = 0x2n;
          break;
        case "symbol":
          GC = 0x3n;
          break;
        case "function":
          GC = 0x4n;
          break;
      }
      return Gd | (0x7ff80000n | GC) << 0x20n;
    };
    let GZ = (GD, Gz) => {
      let Gd = Gm(Gz);
      new DataView(this._inst.exports.memory.buffer).setBigUint64(GD, Gd, true);
    };
    let Gt = (GD, Gz, Gd) => {
      let GC = new Array(Gz);
      for (let Gi = 0; Gi < Gz; Gi++) {
        GC[Gi] = Gk(GD + Gi * 8);
      }
      return GC;
    };
    let Gy = Date.now() - performance.now();
    this.importObject = {
      'wasi_snapshot_preview1': {
        'fd_write': function (GD, Gz, Gd, GC) {
          let Gi = 0;
          if (GD == 1) {
            for (let Gg = 0; Gg < Gd; Gg++) {
              let GJ = Gz + Gg * 8;
              let GX = new DataView(this._inst.exports.memory.buffer).getUint32(GJ + 0, true);
              let Gx = new DataView(this._inst.exports.memory.buffer).getUint32(GJ + 4, true);
              Gi += Gx;
              for (let Gf = 0; Gf < Gx; Gf++) {
                let GY = new DataView(this._inst.exports.memory.buffer).getUint8(GX + Gf);
                if (GY != 13) {
                  if (GY == 10) {
                    let GS = d.decode(new Uint8Array(g));
                    g = [];
                    console.log(GS);
                  } else {
                    g.push(GY);
                  }
                }
              }
            }
          } else {
            console.error("invalid file descriptor:", GD);
          }
          new DataView(this._inst.exports.memory.buffer).setUint32(GC, Gi, true);
          return 0;
        },
        'fd_close': () => 0,
        'fd_fdstat_get': () => 0,
        'fd_seek': () => 0,
        'proc_exit': GD => {
          throw "trying to exit with code " + GD;
        },
        'random_get': (GD, Gz) => (crypto.getRandomValues(new Uint8Array(this._inst.exports.memory.buffer, GD, Gz)), 0)
      },
      'gojs': {
        "runtime.ticks": () => Gy + performance.now(),
        "runtime.sleepTicks": GD => {
          setTimeout(this._inst.exports.go_scheduler, GD);
        },
        "syscall/js.finalizeRef": GD => {
          console.error("syscall/js.finalizeRef not implemented");
        },
        "syscall/js.stringVal": (GD, Gz) => {
          let Gd = d.decode(new DataView(this._inst.exports.memory.buffer, GD, Gz));
          return Gm(Gd);
        },
        "syscall/js.valueGet": (GD, Gz, Gd) => {
          let GC = d.decode(new DataView(this._inst.exports.memory.buffer, Gz, Gd));
          let Gi = Gh(GD);
          let Gg = Reflect.get(Gi, GC);
          return Gm(Gg);
        },
        "syscall/js.valueSet": (GD, Gz, Gd, GC) => {
          let Gi = Gh(GD);
          let Gg = d.decode(new DataView(this._inst.exports.memory.buffer, Gz, Gd));
          let GJ = Gh(GC);
          Reflect.set(Gi, Gg, GJ);
        },
        "syscall/js.valueDelete": (GD, Gz, Gd) => {
          let GC = Gh(GD);
          let Gi = d.decode(new DataView(this._inst.exports.memory.buffer, Gz, Gd));
          Reflect.deleteProperty(GC, Gi);
        },
        "syscall/js.valueIndex": (GD, Gz) => Gm(Reflect.get(Gh(GD), Gz)),
        "syscall/js.valueSetIndex": (GD, Gz, Gd) => {
          Reflect.set(Gh(GD), Gz, Gh(Gd));
        },
        "syscall/js.valueCall": (GD, Gz, Gd, GC, Gi, Gg, GJ) => {
          let GX = Gh(Gz);
          let Gx = d.decode(new DataView(this._inst.exports.memory.buffer, Gd, GC));
          let Gf = Gt(Gi, Gg, GJ);
          try {
            let GY = Reflect.get(GX, Gx);
            GZ(GD, Reflect.apply(GY, GX, Gf));
            new DataView(this._inst.exports.memory.buffer).setUint8(GD + 8, 1);
          } catch (GS) {
            GZ(GD, GS);
            new DataView(this._inst.exports.memory.buffer).setUint8(GD + 8, 0);
          }
        },
        "syscall/js.valueInvoke": (GD, Gz, Gd, GC, Gi) => {
          try {
            let Gg = Gh(Gz);
            let GJ = Gt(Gd, GC, Gi);
            GZ(GD, Reflect.apply(Gg, undefined, GJ));
            new DataView(this._inst.exports.memory.buffer).setUint8(GD + 8, 1);
          } catch (GX) {
            GZ(GD, GX);
            new DataView(this._inst.exports.memory.buffer).setUint8(GD + 8, 0);
          }
        },
        "syscall/js.valueNew": (GD, Gz, Gd, GC, Gi) => {
          let Gg = Gh(Gz);
          let GJ = Gt(Gd, GC, Gi);
          try {
            GZ(GD, Reflect.construct(Gg, GJ));
            new DataView(this._inst.exports.memory.buffer).setUint8(GD + 8, 1);
          } catch (GX) {
            GZ(GD, GX);
            new DataView(this._inst.exports.memory.buffer).setUint8(GD + 8, 0);
          }
        },
        "syscall/js.valueLength": GD => Gh(GD).length,
        "syscall/js.valuePrepareString": (GD, Gz) => {
          let Gd = String(Gh(Gz));
          let GC = y.encode(Gd);
          GZ(GD, GC);
          new DataView(this._inst.exports.memory.buffer).setInt32(GD + 8, GC.length, true);
        },
        "syscall/js.valueLoadString": (GD, Gz, Gd, GC) => {
          let Gi = Gh(GD);
          new Uint8Array(this._inst.exports.memory.buffer, Gz, Gd).set(Gi);
        },
        "syscall/js.valueInstanceOf": (GD, Gz) => Gh(GD) instanceof Gh(Gz),
        "syscall/js.copyBytesToGo": (GD, Gz, Gd, GC, Gi) => {
          let GJ = GD + 4;
          let GX = new Uint8Array(this._inst.exports.memory.buffer, Gz, Gd);
          let Gx = Gh(Gi);
          if (!(Gx instanceof Uint8Array || Gx instanceof Uint8ClampedArray)) {
            new DataView(this._inst.exports.memory.buffer).setUint8(GJ, 0);
            return;
          }
          let Gf = Gx.subarray(0, GX.length);
          GX.set(Gf);
          new DataView(this._inst.exports.memory.buffer).setUint32(GD, Gf.length, true);
          new DataView(this._inst.exports.memory.buffer).setUint8(GJ, 1);
        },
        "syscall/js.copyBytesToJS": (GD, Gz, Gd, GC, Gi) => {
          let GJ = GD + 4;
          let GX = Gh(Gz);
          let Gx = new Uint8Array(this._inst.exports.memory.buffer, Gd, GC);
          if (!(GX instanceof Uint8Array || GX instanceof Uint8ClampedArray)) {
            new DataView(this._inst.exports.memory.buffer).setUint8(GJ, 0);
            return;
          }
          let Gf = Gx.subarray(0, GX.length);
          GX.set(Gf);
          new DataView(this._inst.exports.memory.buffer).setUint32(GD, Gf.length, true);
          new DataView(this._inst.exports.memory.buffer).setUint8(GJ, 1);
        }
      }
    };
    this.importObject.env = this.importObject.gojs;
  }
  async ["run"](Gq) {
    this._inst = Gq;
    this._values = [NaN, 0, null, true, false, self, this];
    this._goRefCounts = [];
    this._ids = new Map();
    this._idPool = [];
    for (this.exited = false;;) {
      let GW = new Promise(Gh => {
        this._resolveCallbackPromise = () => {
          if (this.exited) {
            throw new Error("bad callback: Go program has already exited");
          }
          setTimeout(Gh, 0);
        };
      });
      this._inst.exports._start();
      if (this.exited) {
        break;
      }
      await GW;
    }
  }
  ["_resume"]() {
    if (this.exited) {
      throw new Error("Go program has already exited");
    }
    this._inst.exports.resume();
    if (this.exited) {
      this._resolveExitPromise();
    }
  }
  ["_makeFuncWrapper"](Gq) {
    let GW = this;
    return function () {
      let Gh = {
        'id': Gq,
        'this': this,
        'args': arguments
      };
      GW._pendingEvent = Gh;
      GW._resume();
      return Gh.result;
    };
  }
};
var G7 = {
  'token': '',
  'messagePort': null
};
var G8 = new Map();
function G9(Gq) {
  let Gh = Math.random().toString(36).slice(2);
  GE({
    'type': "eval-request",
    'id': Gh,
    'argv': Gq,
    'token': ''
  });
  return new Promise((Gk, Gm) => {
    G8.set(Gh, {
      'resolve': Gk,
      'reject': Gm
    });
  });
}
function GG() {
  let GW = false;
  let Gh = new Error();
  Object.defineProperty(Gh, "stack", {
    'get'() {
      GW = true;
      return '';
    }
  });
  console.log(Gh);
  return GW;
}
async function GT() {
  let GW = await fetch("/.well-known/vercel/security/static/challenge.v2.wasm");
  let Gh = new G6();
  Gh.importObject.gojs["syscall/js.finalizeRef"] = () => null;
  let {
    instance: Gk
  } = await WebAssembly.instantiateStreaming(GW, Gh.importObject);
  Gh.run(Gk);
  return {
    'instance': Gk,
    'go': Gh
  };
}
async function Gs(Gq, GW, Gh) {
  let Gm = await fetch("/.well-known/vercel/security/request-challenge", {
    'method': "POST",
    'headers': {
      'x-vercel-challenge-token': Gq,
      'x-vercel-challenge-solution': GW,
      'x-vercel-challenge-version': Gh
    }
  });
  if (!Gm.ok) {
    if (Gm.headers.get("Cf-Mitigated")) {
      let GZ = Gm.headers.get("Cf-Ray");
      let GM = GZ ? "Ray ID: " + GZ : "Challenge blocked by Cloudflare";
      let Gt = new Error(GM);
      Gt.__blocked = true;
      throw Gt;
    } else {
      if (Gm.status === 401 || Gm.status === 403) {
        let Gb = new Error("Challenge blocked");
        Gb.__blocked = true;
        throw Gb;
      } else {
        if (Gm.status === 404) {
          let Gy = new Error("Challenge not forwarded");
          Gy.__blocked = true;
          throw Gy;
        } else {
          if (Gm.status >= 700) {
            let GD = new Error(String(Gm.status));
            GD.__failed = true;
            throw GD;
          }
        }
      }
    }
    throw new Error(Gm.statusText);
  }
  return Gm;
}
function GE(Gq) {
  null?.["postMessage"](Gq);
}
async function GN(Gq) {
  await GT();
  let Gh;
  try {
    let Gk = await Solve(Gq.token);
    Gh = JSON.parse(Gk);
    let Gm = Gh.solution;
    await Gs(Gq.token, Gm, Gq.version);
    GE({
      'type': "solve-response",
      'success': true,
      'token': ''
    });
  } catch (GZ) {
    let GM = GZ != null && typeof GZ == "object" && "__blocked" in GZ;
    let Gt = GZ != null && typeof GZ == "object" && "__failed" in GZ;
    if (GM) {
      let Gb = GZ instanceof Error ? GZ.message : String(GZ);
      GE({
        'type': "solve-response",
        'success': false,
        'blocked': true,
        'metadata': Gb ?? undefined,
        'token': ''
      });
    } else {
      if (Gh?.["badInfo"]) {
        GE({
          'type': "solve-response",
          'success': false,
          'blocked': false,
          'metadata': Gh?.["badInfo"] ?? undefined,
          'token': ''
        });
      } else {
        if (Gt) {
          let Gy = GZ instanceof Error ? GZ.message : String(GZ);
          GE({
            'type': "solve-response",
            'success': false,
            'blocked': false,
            'metadata': Gy ?? undefined,
            'token': ''
          });
        } else {
          GE({
            'type': "solve-response",
            'success': false,
            'blocked': false,
            'metadata': undefined,
            'token': ''
          });
        }
      }
    }
  }
}
function GU(Gq) {
  if (Gc(Gq)) {
    switch (Gq.data.type) {
      case "solve-request":
        {
          GN(Gq.data);
          break;
        }
      case "eval-response":
        {
          let Gh = G8.get(Gq.data.id);
          if ("value" in Gq.data) {
            Gh?.["resolve"](Gq.data.value);
          } else {
            Gh?.["reject"](Gq.data.error);
          }
          G8["delete"](Gq.data.id);
          break;
        }
      default:
        break;
    }
  }
}
function Gc(Gq) {
  G7.token = '' || Gq.data.token;
  return Gq.data.token === '';
}
self.onmessage = Gq => {
  let GW = Gq.data.port;
  G7.messagePort = GW;
  GW.onmessage = GU;
};
self.setTimeout.e = G9;
self.setTimeout.d = GG;